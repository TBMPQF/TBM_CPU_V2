"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RCON = void 0;
const assert_1 = __importDefault(require("assert"));
const eventemitter2_1 = require("eventemitter2");
const util_1 = require("util");
const TCPClient_1 = __importDefault(require("./TCPClient"));
const encoder = new util_1.TextEncoder();
class RCON extends eventemitter2_1.EventEmitter2 {
    constructor() {
        super();
        this.socket = null;
        this.requestID = 0;
        this.isLoggedIn = false;
    }
    connect(host, port = 25575, options = {}) {
        (0, assert_1.default)(typeof host === 'string', `Expected 'host' to be a 'string', got '${typeof host}'`);
        (0, assert_1.default)(host.length > 1, `Expected 'host' to have a length greater than 0, got ${host.length}`);
        (0, assert_1.default)(typeof port === 'number', `Expected 'port' to be a 'number', got '${typeof port}'`);
        (0, assert_1.default)(Number.isInteger(port), `Expected 'port' to be an integer, got '${port}'`);
        (0, assert_1.default)(port >= 0, `Expected 'port' to be greater than or equal to 0, got '${port}'`);
        (0, assert_1.default)(port <= 65535, `Expected 'port' to be less than or equal to 65535, got '${port}'`);
        (0, assert_1.default)(typeof options === 'object', `Expected 'options' to be an 'object', got '${typeof options}'`);
        this.socket = new TCPClient_1.default();
        return this.socket.connect(Object.assign({ host, port }, options));
    }
    login(password) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, assert_1.default)(typeof password === 'string', `Expected 'password' to be a 'string', got '${typeof password}'`);
            (0, assert_1.default)(password.length > 1, `Expected 'password' to have a length greater than 0, got ${password.length}`);
            if (this.socket === null || !this.socket.isConnected)
                throw new Error('login() attempted before RCON has connected');
            this.isLoggedIn = false;
            const passwordBytes = encoder.encode(password);
            // Login packet
            // https://wiki.vg/RCON#3:_Login
            {
                this.socket.writeInt32LE(10 + passwordBytes.byteLength);
                this.socket.writeInt32LE(this.requestID++);
                this.socket.writeInt32LE(3);
                this.socket.writeBytes(passwordBytes);
                this.socket.writeBytes(Uint8Array.from([0x00, 0x00]));
                yield this.socket.flush(false);
            }
            // Login response packet
            // https://wiki.vg/RCON#3:_Login
            {
                yield this.socket.readInt32LE();
                const requestID = yield this.socket.readInt32LE();
                if (requestID === -1)
                    throw new Error('Invalid RCON password');
                const packetType = yield this.socket.readInt32LE();
                if (packetType !== 2)
                    throw new Error('Expected server to send packet type 2, received ' + packetType);
                yield this.socket.readBytes(2);
            }
            process.nextTick(() => __awaiter(this, void 0, void 0, function* () {
                while (this.socket !== null && this.socket.isConnected && this.isLoggedIn) {
                    try {
                        yield this._readPacket();
                    }
                    catch (_a) {
                        // Ignore
                    }
                }
            }));
            this.isLoggedIn = true;
        });
    }
    run(command) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, assert_1.default)(typeof command === 'string', `Expected 'command' to be a 'string', got '${typeof command}'`);
            (0, assert_1.default)(command.length > 1, `Expected 'command' to have a length greater than 0, got ${command.length}`);
            if (this.socket === null || !this.socket.isConnected)
                throw new Error('run() attempted before RCON has connected');
            if (!this.isLoggedIn)
                throw new Error('run() attempted before RCON has successfully logged in');
            const commandBytes = encoder.encode(command);
            const requestID = this.requestID++;
            this.socket.writeInt32LE(10 + commandBytes.byteLength);
            this.socket.writeInt32LE(requestID);
            this.socket.writeInt32LE(2);
            this.socket.writeBytes(commandBytes);
            this.socket.writeBytes(Uint8Array.from([0x00, 0x00]));
            yield this.socket.flush(false);
            return requestID;
        });
    }
    execute(command) {
        return __awaiter(this, void 0, void 0, function* () {
            (0, assert_1.default)(typeof command === 'string', `Expected 'command' to be a 'string', got '${typeof command}'`);
            (0, assert_1.default)(command.length > 1, `Expected 'command' to have a length greater than 0, got ${command.length}`);
            const requestID = yield this.run(command);
            return new Promise((resolve) => {
                const listenerFunc = (data) => {
                    if (data.requestID !== requestID)
                        return;
                    this.removeListener('message', listenerFunc);
                    resolve(data.message);
                };
                this.on('message', listenerFunc);
            });
        });
    }
    _readPacket() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.socket === null || !this.socket.isConnected || !this.isLoggedIn)
                return Promise.reject(new Error('Attempted to read packet when socket was disconnected or RCON was not logged in'));
            const packetLength = yield this.socket.readInt32LE();
            const requestID = yield this.socket.readInt32LE();
            const packetType = yield this.socket.readInt32LE();
            if (packetType === 0) {
                const message = yield this.socket.readStringNT();
                yield this.socket.readBytes(1);
                this.emit('message', { requestID, message });
            }
            else {
                yield this.socket.readBytes(packetLength - 8);
            }
        });
    }
    close() {
        if (this.socket === null)
            return Promise.resolve();
        return this.socket.close();
    }
}
exports.RCON = RCON;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUkNPTi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9zdHJ1Y3R1cmUvUkNPTi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxvREFBNEI7QUFDNUIsaURBQXlEO0FBRXpELCtCQUFtQztBQUNuQyw0REFBb0M7QUFFcEMsTUFBTSxPQUFPLEdBQUcsSUFBSSxrQkFBVyxFQUFFLENBQUM7QUFjbEMsTUFBTSxJQUFLLFNBQVEsNkJBQWE7SUFLL0I7UUFDQyxLQUFLLEVBQUUsQ0FBQztRQUxELFdBQU0sR0FBcUIsSUFBSSxDQUFDO1FBQ2hDLGNBQVMsR0FBRyxDQUFDLENBQUM7UUFDZCxlQUFVLEdBQUcsS0FBSyxDQUFDO0lBSTNCLENBQUM7SUFFRCxPQUFPLENBQUMsSUFBWSxFQUFFLElBQUksR0FBRyxLQUFLLEVBQUUsVUFBbUMsRUFBRTtRQUN4RSxJQUFBLGdCQUFNLEVBQUMsT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFLDBDQUEwQyxPQUFPLElBQUksR0FBRyxDQUFDLENBQUM7UUFDM0YsSUFBQSxnQkFBTSxFQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFLHdEQUF3RCxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQztRQUMvRixJQUFBLGdCQUFNLEVBQUMsT0FBTyxJQUFJLEtBQUssUUFBUSxFQUFFLDBDQUEwQyxPQUFPLElBQUksR0FBRyxDQUFDLENBQUM7UUFDM0YsSUFBQSxnQkFBTSxFQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEVBQUUsMENBQTBDLElBQUksR0FBRyxDQUFDLENBQUM7UUFDbEYsSUFBQSxnQkFBTSxFQUFDLElBQUksSUFBSSxDQUFDLEVBQUUsMERBQTBELElBQUksR0FBRyxDQUFDLENBQUM7UUFDckYsSUFBQSxnQkFBTSxFQUFDLElBQUksSUFBSSxLQUFLLEVBQUUsMkRBQTJELElBQUksR0FBRyxDQUFDLENBQUM7UUFDMUYsSUFBQSxnQkFB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
/// <reference types="node" />
import { EventEmitter2, OnOptions } from 'eventemitter2';
import { NetConnectOpts } from 'net';
export interface Message {
    requestID: number;
    message: string;
}
export interface RCONEvents {
    on(event: 'message', listener: (data: Message) => void, options?: boolean | OnOptions): void;
    once(event: 'message', listener: (data: Message) => void, options?: boolean | OnOptions): void;
    many(event: 'message', timesToListen: number, listener: (data: Message) => void, options?: boolean | OnOptions): void;
    emit(event: 'message', value: Message): void;
}
declare class RCON extends EventEmitter2 implements RCONEvents {
    private socket;
    private requestID;
    private isLoggedIn;
    constructor();
    connect(host: string, port?: number, options?: Partial<NetConnectOpts>): Promise<void>;
    login(password: string): Promise<void>;
    run(command: string): Promise<number>;
    execute(command: string): Promise<string>;
    _readPacket(): Promise<void>;
    close(): Promise<void>;
}
export { RCON };

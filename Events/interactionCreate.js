const {
  ActionRowBuilder,
  PermissionsBitField,
  ButtonBuilder,
  EmbedBuilder,
  ChannelType,
  ButtonStyle,
  Embed, Discord
} = require("discord.js");
const mongoose = require("mongoose");
const config = require("../config");
const User = require("../models/experience");
const levelUp = require("../models/levelUp");
const interactionSetConfig = require("./interactionsetconfig");
const ServerRole = require("../models/serverRole");
const axios = require('axios');
const {
  logRequestMessageIds,
  welcomeRequestMessageIds,
  reglementRequestMessageIds,
  RolereglementRequestMessageIds,
  RoleWelcomeRequestMessageIds,
  implicationRequestMessageIds,
  dailyRequestMessageIds,
  suggestionsRequestMessageIds,
  roleChannelRequestMessageIds,
  ticketRequestMessageIds,
  RoleAdminRequestMessageIds,
} = require("../models/shared");
const ServerConfig = require("../models/serverConfig");
const ytdl = require("ytdl-core");
const {
  joinVoiceChannel,
  createAudioPlayer,
  createAudioResource,
} = require("@discordjs/voice");
const { queue } = require("../models/queue");
const SearchMateMessage = require('../models/apexSearchMate');
const VocalChannel = require('../models/apexVocal');
const ApexStats = require('../models/apexStats');
const Music = require("../models/music")

mongoose.connect(config.mongourl, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

const usersVoted = new Map();

module.exports = {
  name: "interactionCreate",
  async execute(interaction, bot) {
    // Bouton Daily, pour r√©cup√©rer son bonus quotidien.
    if (interaction.customId === "DAILYXP") {
      const user = await User.findOne({
        serverID: interaction.guild.id,
        userID: interaction.user.id,
      });

      if (!user) {
        return interaction.reply({
          content:
            "Avant de vouloir r√©cup√©rer ton bonus, ne veux-tu pas d'abord faire un peu connaissance avec tes nouveaux camarades ?",
          ephemeral: true,
        });
      }

      const now = new Date();
      const lastClaim = user.lastDaily;
      const msIn47Hours = 47 * 60 * 60 * 1000;
      const msIn23Hours = 23 * 60 * 60 * 1000;
      const daysInWeek = 7;
      let resetConsecutiveDaily = false;

      if (lastClaim && now.getTime() - lastClaim.getTime() < msIn47Hours) {
        const timeSinceLastClaim = now.getTime() - lastClaim.getTime();
      
        if (timeSinceLastClaim < msIn23Hours) {
          const timeRemaining = msIn23Hours - timeSinceLastClaim;
          const hoursRemaining = Math.floor(timeRemaining / (60 * 60 * 1000));
          const minutesRemaining = Math.floor(
            (timeRemaining % (60 * 60 * 1000)) / (60 * 1000)
          );
          const secondsRemaining = Math.floor(
            (timeRemaining % (60 * 1000)) / 1000
          );
      
          let timeRemainingMessage = "";
          if (hoursRemaining > 0) {
              timeRemainingMessage += `\`${hoursRemaining} heure${hoursRemaining > 1 ? 's' : ''}\`, `;
              timeRemainingMessage += `\`${minutesRemaining.toString().padStart(2, "0")} minute${minutesRemaining > 1 ? 's' : ''}\` et `;
          } else if (minutesRemaining > 0) {
              timeRemainingMessage += `\`${minutesRemaining.toString().padStart(2, "0")} minute${minutesRemaining > 1 ? 's' : ''}\` et `;
          }
          timeRemainingMessage += `\`${secondsRemaining.toString().padStart(2, "0")} seconde${secondsRemaining > 1 ? 's' : ''}\``;
      
          return interaction.reply({
            content: `‰∏®ùêìu dois attendre encore ${timeRemainingMessage} avant de pouvoir r√©cup√©rer ton __ùêÉaily__ !`,
            ephemeral: true,
          });
        }

        user.consecutiveDaily += 1;
      } else {
        user.lostConsecutiveDaily = user.consecutiveDaily;
        resetConsecutiveDaily = true;
        user.consecutiveDaily = 1;
      }

      if (user.consecutiveDaily > user.maxDaily) {
        user.maxDaily = user.consecutiveDaily;
      }

      const SPECIAL_DAILY_STREAK = 50;
      if (user.consecutiveDaily % SPECIAL_DAILY_STREAK === 0) {
          const specialChannel = interaction.guild.channels.cache.get('717144491525406791');
          if (specialChannel) {
              specialChannel.send(`ùêÖ√©licitations √† **${interaction.user.username}** pour avoir atteint \`${user.consecutiveDaily}\` jours __cons√©cutifs__ de bonus quotidien ! üéâ`)
                  .then(message => {
                      const reactions = ['üá±', 'üá¥', 'üá∏', 'üá™', 'üá∑'];
                      reactions.forEach(reaction => message.react(reaction));
                  })
                  .catch(console.error);
          }
      }

      const baseXP = 200;
      const weeksConsecutive = Math.floor(user.consecutiveDaily / daysInWeek);
      const bonusXP = baseXP * 0.02 * weeksConsecutive;
      let totalXP = baseXP + bonusXP;

      if (user.malusDuration > 0) {
        if (user.malusDaily > totalXP) {
          user.malusDaily = totalXP;
        }

        totalXP -= user.malusDaily;
        user.malusDuration -= 1;

        if (user.malusDuration == 0) {
          user.malusDaily = 0;
        }
      }

      user.xp += totalXP;
      levelUp(interaction, user, user.xp);

      let dailyMessage = "";

      if (lastClaim == null) {
        dailyMessage = `‰∏®ùêìu viens de r√©cuperer ton bonus quotidien ! \`+${totalXP} ùêóp\` :tada: !`;
      } else if (resetConsecutiveDaily) {
        dailyMessage = `‰∏®ùêìu viens de r√©cuperer ton bonus quotidien ! \`+${totalXP} ùêóp\` :tada: !\n\n ùêåais tu as __perdu__ toute tes flammes \`1\`. :fire:\n ùêìon ancien record est de \`${user.maxDaily}\`.`;
      } else if (user.consecutiveDaily === 1) {
        dailyMessage = `‰∏®ùêìu viens de r√©cuperer ton bonus quotidien ! \`+${totalXP} ùêóp\` :tada: !`;
      } else {
        dailyMessage = `‰∏®ùêìu viens de r√©cuperer ton bonus quotidien ! \`+${totalXP} ùêóp\` :tada: !\n\n ùêìu es en **feu** \`${user.consecutiveDaily}\`. :fire:\n ùêìon record est de \`${user.maxDaily}\`.`;
      }

      user.lastDaily = now;

      const dailyEmbed = new EmbedBuilder()
        .setColor("Gold")
        .setTitle(dailyMessage)
        .setAuthor({
          name: interaction.user.username,
          iconURL: interaction.user.displayAvatarURL({ dynamic: true })
        })
        .setFooter({
          text: `‰∏®`
        })
        .setTimestamp();

      let components = [];

      if (resetConsecutiveDaily == true && lastClaim != null) {
        const R√©cupDailyrow = new ActionRowBuilder().addComponents(
          new ButtonBuilder()
            .setCustomId("RECUPDAILY_BUTTON")
            .setEmoji("üí®")
            .setLabel("‰∏®Rattraper mon ùêÉaily")
            .setStyle(ButtonStyle.Primary)
        );

        components.push(R√©cupDailyrow);
      }

      interaction.reply({
        embeds: [dailyEmbed],
        components: components,
        ephemeral: true,
      });

      //LOG Pour Daily.
      const serverInfo = await ServerConfig.findOne({
        serverID: interaction.guild.id,
      });

      if (serverInfo || !serverInfo.logChannelID) {
        const XPLOG = new EmbedBuilder()
          .setColor("Orange")
          .setAuthor({
            name: interaction.user.username,
            iconURL: interaction.user.displayAvatarURL({ dynamic: true })
          })
          .setTitle(
            `‰∏®ùêïient de r√©cuperer son bonus quotidien. üí∏`
          )
          .setTimestamp()
          .setFooter({
            text: `ùêí√©rie en cours : ${user.consecutiveDaily}`
          });

        if (serverInfo && serverInfo.logChannelID) {
          const logChannel = bot.channels.cache.get(serverInfo.logChannelID);
          if (logChannel) {
            logChannel.send({ embeds: [XPLOG] });
          }
        }
      }
    }
    // Bouton r√©cup√©ration lors de perte du daily
    if (interaction.customId === "RECUPDAILY_BUTTON") {
      const user = await User.findOne({
        serverID: interaction.guild.id,
        userID: interaction.user.id,
      });

      const costXP = calculateCostXP(user.lostConsecutiveDaily);
      const malus = calculateMalus(user.lostConsecutiveDaily);
      const malusDuration = calculateMalusDuration(user.lostConsecutiveDaily);

      if (user.xp >= costXP) {
        const confirmMessage = `‰∏®ùêìu veux vraiment r√©cup√©rer ton __ùêÉaily__ ? Tu avais une s√©rie de \`${
          user.lostConsecutiveDaily
        }.\`\n √áa te coutera \`${costXP.toLocaleString()}\` ùêóp et tu auras un malus de \`${malus}\` ùêóp pour \`${malusDuration}\` jour(s) sur tes prochains __ùêÉaily__.`;

        const yesButton = new ButtonBuilder()
          .setCustomId("CONFIRM_RECUPDAILY_BUTTON")
          .setLabel("Oui")
          .setStyle(ButtonStyle.Success);
        const noButton = new ButtonBuilder()
          .setCustomId("CANCEL_RECUPDAILY_BUTTON")
          .setLabel("Non")
          .setStyle(ButtonStyle.Danger);

        const row = new ActionRowBuilder().addComponents(yesButton, noButton);

        await interaction.reply({
          content: confirmMessage,
          components: [row],
          ephemeral: true,
        });
      } else {
        return interaction.reply({
          content: `‰∏®ùêìu n'as pas assez d'ùêóp pour rattraper ton __bonus quotidien__. Tu as besoin de \`${costXP.toLocaleString()}\` ùêóp minimum et tu as uniquement \`${user.xp.toLocaleString()}\` ùêóp disponible.`,
          ephemeral: true,
        });
      }
    }

    function calculateCostXP(consecutiveDaily) {
      // Chaque jour de la s√©rie co√ªte 600 xp
      return consecutiveDaily * 600;
    }

    function calculateMalus(consecutiveDaily) {
      // Malus est de 50 si la s√©rie est inf√©rieure √† 7 jours, sinon c'est 75
      return consecutiveDaily < 7 ? 50 : 75;
    }

    function calculateMalusDuration(consecutiveDaily) {
      // Chaque semaine de la s√©rie rajoute 1 jour de malus
      return Math.max(1, Math.floor(consecutiveDaily / 7));
    }

    // Bouton confirmation r√©cup√©ration de daily
    if (interaction.customId === "CONFIRM_RECUPDAILY_BUTTON") {
      const user = await User.findOne({
        serverID: interaction.guild.id,
        userID: interaction.user.id,
      });

      const storedConsecutiveDaily = user.lostConsecutiveDaily || 0;
      const costXP = calculateCostXP(storedConsecutiveDaily);
      const malus = calculateMalus(storedConsecutiveDaily);
      const malusDuration = calculateMalusDuration(storedConsecutiveDaily);

      if (user.xp >= costXP) {
        user.xp -= costXP;
        user.consecutiveDaily = user.lostConsecutiveDaily;
        user.lostConsecutiveDaily = 0;
        user.malusDaily = malus;
        user.malusDuration = malusDuration;
        user.lastDaily = new Date(Date.now());
        await user.save();

        await interaction.reply({
          content: `‰∏®ùêìu as rattrap√© ton __ùêÉaily__ pour seulement \`${costXP.toLocaleString()}\` ùêóp. Tes copains ne diront plus que tu es un rat ! Par contre.. __Un malus__ de \`${malus}\` a √©t√© appliqu√© pour \`${malusDuration} jour(s)\`.`,
          ephemeral: true,
        });

        const recoveredDailyLog = new EmbedBuilder()
          .setColor("Orange")
          .setAuthor({
            name: interaction.user.username,
            iconURL: interaction.user.displayAvatarURL({ dynamic: true })
          })
          .setTitle(`‰∏®ùêïient de r√©cup√©r√© son Daily manqu√© !`)
          .setDescription(`\n_S√©rie recup√©r√©e_ : \`${user.consecutiveDaily}\`.\n\n_XP d√©pens√©_ : \`${costXP.toLocaleString()}\` XP.\n\n_Malus appliqu√©_ : \`${malus}\` XP pour \`${malusDuration}\` jours.`)
          .setFooter({
            text: `XP restant : ${user.xp.toLocaleString()}`,
            iconURL: interaction.user.displayAvatarURL({ dynamic: true, size: 64 })
          })
          .setTimestamp();

      const serverInfo = await ServerConfig.findOne({ serverID: interaction.guild.id });
        if (serverInfo && serverInfo.logChannelID) {
          const logChannel = bot.channels.cache.get(serverInfo.logChannelID);
          if (logChannel) {
            logChannel.send({ embeds: [recoveredDailyLog] });
          }
        }
      } else {
        return interaction.reply({
          content: `‰∏®**L'application met trop de temps √† r√©pondre -> contact mon cr√©ateur \`tbmpqf\`.**`,
          ephemeral: true,
        });
      }
    }

    // Bouton cancel r√©cup√©ration de daily
    if (interaction.customId === "CANCEL_RECUPDAILY_BUTTON") {
      return interaction.reply({
        content:
          "‰∏®ùêìu as d√©cid√© de ne pas r√©cup√©rer ton __ùêÉaily__. Quelle audace ! N'oublie pas -> **ce qui ne te tue pas, te rend plus fort**... ou pas ! üòÖ",
        ephemeral: true,
      });
    }

    //SelectMenu pour le channel r√¥le, s√©lecteur de jeux.
    if (interaction.isStringSelectMenu()) {
      const member = interaction.member;

      if (interaction.customId === "RoleCustomID") {
        let choice = interaction.values[0];
        interaction.deferReply({ ephemeral: true }).then(() => {
          if (choice == "APEX") {
            const roleID = "811662603713511425";
            handleRole(interaction, member, roleID, "Apex Legends");
          } else if (choice == "NEWORLD") {
            const roleID = "907320710559576105";
            handleRole(interaction, member, roleID, "New World");
          } else if (choice == "FOREST") {
            const roleID = "1078754580113920020";
            handleRole(interaction, member, roleID, "Sons of The Forest");
          } else if (choice == "CALLOF") {
            const roleID = "813800188317663254";
            handleRole(interaction, member, roleID, "Call of Duty");
          } else if (choice == "ROCKET") {
            const roleID = "811663563558092841";
            handleRole(interaction, member, roleID, "Rocket League");
          } else if (choice == "MINECRAFT") {
            const roleID = "811663653140168741";
            handleRole(interaction, member, roleID, "Minecraft");
          } else if (choice == "DISCORDJS") {
            const roleID = "1185978943745040384";
            handleRole(interaction, member, roleID, "Discord JS");
          } 
        });
      } else if (interaction.customId === interactionSetConfig.name) {
        interactionSetConfig.execute(interaction);
      }
    }

    // Gestion de la musique
    let connections = {};
    let playerIdleHandlerAttached = false;
    const player = createAudioPlayer();
    let updateInterval;
    async function handleVoiceChannel(interaction, notInChannelMessage) {
      const voiceChannel = interaction.member.voice.channel;
      if (!voiceChannel) {
        await sendAndDeleteMessage(interaction, notInChannelMessage, 5000);
        return null;
      }
      return voiceChannel;
    }
    if (interaction.customId === "PLAY_MUSIC") {
      const voiceChannel = await handleVoiceChannel(
        interaction,
        ":microphone2:‰∏®ùêìu dois √™tre dans un salon vocal pour lancer la playlist !"
      );
      if (!voiceChannel) return;

      const serverId = interaction.guild.id;

      if (!queue[serverId] || queue[serverId].length === 0) {
        await sendAndDeleteMessage(
          interaction,
          ":snowflake:‰∏®ùêãa playlist est actuellement vide.",
          5000
        );
        return;
      }

      connections[serverId] = joinVoiceChannel({
        channelId: voiceChannel.id,
        guildId: voiceChannel.guild.id,
        adapterCreator: voiceChannel.guild.voiceAdapterCreator,
      });

      const player = createAudioPlayer();
      await playNextSong(interaction, serverId, player, queue);

      await sendAndDeleteMessage(
        interaction,
        ":saxophone:‰∏®ùêâe lance la musique poulet !",
        5000
      );
    }
    async function playNextSong(interaction, serverId, player, queue) {
      if (!queue[serverId] || queue[serverId].length === 0) {
          if (connections[serverId]) {
              connections[serverId].destroy();
              delete connections[serverId];
          }
          return;
      }
      const song = queue[serverId][0];
      queue[serverId].startTime = Date.now();
      try {
          const stream = ytdl(song.url, { filter: 'audioonly', quality: 'highestaudio' });
          stream.on('error', error => {
              console.error(`Erreur lors de la lecture de la musique : ${error.message}`);
              queue[serverId].shift();
              playNextSong(interaction, serverId, player, queue);
          });
  
          const resource = createAudioResource(stream);
          player.play(resource);
          connections[serverId].subscribe(player);
  
      } catch (error) {
          console.error(`Erreur lors de la cr√©ation du flux de musique : ${error.message}`);
          queue[serverId].shift();
          playNextSong(interaction, serverId, player, queue);
      }
      if (!playerIdleHandlerAttached) {
        player.on('idle', async () => { 
          clearInterval(updateInterval);
            if (queue[serverId] && queue[serverId].length > 0) {
                queue[serverId].shift(); 
                await updateMusicEmbed(interaction, serverId, queue);
                playNextSong(interaction, serverId, player, queue);
            } else {
                if (connections[serverId]) {
                    connections[serverId].destroy();
                    delete connections[serverId];
                }
            }
        });
        playerIdleHandlerAttached = true;
    
      }
      if (updateInterval) clearInterval(updateInterval);
      updateInterval = setInterval(async () => {
          await updateMusicEmbed(interaction, serverId, queue);
      }, 10000);
    }
    async function updateMusicEmbed(interaction, serverId, queue) {
      try {
        const musicEntry = await Music.findOne({ serverId });
        if (!musicEntry) {
          console.error('Music entry not found in the database');
          return;
        }
        const messageId = musicEntry.messageId;
        await updateEmbedMessage(interaction, serverId, queue, messageId);
      } catch (error) {
        console.error('Error in updateMusicEmbed:', error);
      }
    }
    async function updateEmbedMessage(interaction, serverId, queue, messageId) {
      try {
        const musicEntry = await Music.findOne({ serverId });
        if (!musicEntry || !musicEntry.channelId) {
          console.error('Entr√©e musicale ou channelId non trouv√©e dans la base de donn√©es pour le serveur:', serverId);
          return;
        }
    
        const channel = await interaction.guild.channels.fetch(musicEntry.channelId);
        const message = await channel.messages.fetch(messageId).catch(console.error);
    
        if (!message) {
          console.error("Le message √† mettre √† jour n'a pas √©t√© trouv√© ou une erreur s'est produite lors de la r√©cup√©ration:", messageId);
          return;
        }
    
        let playlistText = "";
        for (let i = 0; i < queue[serverId].length; i++) {
          let title = queue[serverId][i].title;
          title = title.replace(/ *\([^)]*\) */g, "");
          title = title.replace(/ *\[[^\]]*] */g, "");
          const song = queue[serverId][i];
          if (i === 0) {
            playlistText += `\`${i + 1}\`‰∏®**${song.title}**\n`;
          } else {
            playlistText += `\`${i + 1}\`‰∏®${song.title}\n`;
          }
        }
        if (playlistText.length > 4096) playlistText = playlistText.substring(0, 4093) + '...';
        const currentTime = Date.now();
        const elapsedTime = currentTime - queue[serverId].startTime;
        const song = queue[serverId][0];
        const progress = Math.min(elapsedTime / song.duration, 1);
        const progressBar = generateProgressBar(progress, 10);
        const newFooterText = `Progression : [${progressBar}] - ${bot.guilds.cache.get(serverId).name}`;
    
        const newEmbed = new EmbedBuilder()
          .setColor("Purple")
          .setTitle(`‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚àà \`MUSIQUES\` ‚àã‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï`)
          .setThumbnail("https://yt3.googleusercontent.com/ytc/APkrFKb-qzXQJhx650-CuoonHAnRXk2_wTgHxqcpXzxA_A=s900-c-k-c0x00ffffff-no-rj")
          .setDescription(playlistText.length === 0 ? "**‰∏®ùêãa playlist est vide pour le moment‰∏®**\n\n**√âcrit** dans le chat le nom de ta __musique pr√©f√©r√©e__ pour l'ajout√© dans la playlist." : playlistText)
          .setFooter({
            text: newFooterText,
            iconURL: bot.guilds.cache.get(serverId).iconURL(),
          });

        await message.edit({ embeds: [newEmbed] });
      } catch (error) {
        console.error('Erreur dans la fonction updateEmbedMessage:', error);
      }
    }
    function generateProgressBar(progress, length) {
      const position = Math.round(length * progress);
      let bar = '';
      for (let i = 0; i < length; i++) {
          bar += i === position ? 'üîò' : '‚îÅ';
      }
      return bar;
    }
    async function sendAndDeleteMessage(interaction, description, delay) {
      try {
        const msg = await interaction.reply({
          embeds: [{ description, color: 0x800080 }],
          fetchReply: true,
        });
        setTimeout(() => msg.delete().catch(console.error), delay);
      } catch (error) {
        console.error('Erreur dans la fonction sendAndDeleteMessage :', error);
      }
    }
    //Arr√™ter la musique
    if (interaction.customId === "STOP_MUSIC") {
      const serverId = interaction.guild.id;
  
      // Arr√™ter le lecteur audio si la file d'attente existe
      if (queue[serverId] && queue[serverId].length > 0) {
          player.stop();
      }
  
      // Vider la file d'attente
      queue[serverId] = [];
  
      // D√©truire la connexion si elle existe
      if (connections[serverId]) {
          connections[serverId].destroy();
          delete connections[serverId];
      }
  
      // Mettre √† jour l'embed pour refl√©ter que la playlist est vide
      await updateMusicEmbed(interaction, serverId, queue);
  
      // Envoyer une r√©ponse pour confirmer l'arr√™t de la musique
      const stopMsg = await interaction.reply({
          embeds: [{
              description: ":no_entry_sign:‰∏®La musique a √©t√© arr√™t√©e et la playlist est vide.",
              color: 0x800080,
          }],
      });
      setTimeout(() => stopMsg.delete(), 5000);
    }
    // Passe √† la musique suivante de la playlist
    if (interaction.customId === "NEXT_MUSIC") {
      const voiceChannel = await handleVoiceChannel(
        interaction,
        ":microphone2:‰∏®ùêìu dois √™tre dans un salon vocal pour passer √† la prochaine musique !"
      );
      if (!voiceChannel) return;

      const serverId = interaction.guild.id;

      if (!queue[serverId] || queue[serverId].length === 0) {
        sendAndDeleteMessage(
          interaction,
          ":snowflake:‰∏®ùêàl n'y a pas d'autre chanson dans la playlist apr√®s celle-l√†.",
          5000
        );
        return;
      }

      if (!connections[serverId]) {
        sendAndDeleteMessage(
          interaction,
          ":x:‰∏®ùêâe ne suis pas connect√© √† un salon vocal.",
          5000
        );
        return;
      }

      const player = createAudioPlayer();
      playNextSong(interaction, serverId, player, queue);

      sendAndDeleteMessage(
        interaction,
        ":next_track:‰∏®ùêâ'ai pass√© √† la prochaine musique !",
        5000
      );
    }

    async function handleRole(interaction, member, roleID, roleName) {
      if (member.roles.cache.some((role) => role.id == roleID)) {
        await member.roles.remove(roleID);
        interaction.editReply({
          content: `Votre r√¥le \`${roleName}\` a √©t√© supprim√©.`,
        });
      } else {
        await member.roles.add(roleID);
        interaction.editReply({
          content: `Vous avez r√©cup√©r√© votre r√¥le \`${roleName}\`.`,
        });
      }
    }

    // Validation r√®glement avec r√¥le
    if (interaction.customId === "VALID_REGL") {
      const guild = await interaction.client.guilds.fetch(interaction.guildId);
      const member = await guild.members.fetch(interaction.user.id);

      const serverConfig = await ServerConfig.findOne({ serverID: guild.id });

      if (serverConfig && serverConfig.roleReglementID) {
        const roleId = serverConfig.roleReglementID;

        if (!guild.roles.cache.has(roleId)) {
          await interaction.reply({
            content: `Le r√¥le ${roleId} n'existe pas sur ce serveur.`,
            ephemeral: true,
          });
          return;
        }

        if (member.roles.cache.has(roleId)) {
          await interaction.reply({
            content:
              "Tu as d√©j√† valid√© le r√®glement, quelque chose √† te reprocher peut-√™tre ?? :thinking:",
            ephemeral: true,
          });
          return;
        }

        try {
          await member.roles.add(roleId);
          await interaction.reply({
            content:
              "Merci d'avoir pris connaissance du r√®glement. :sunglasses:",
            ephemeral: true,
          });
        } catch (error) {
          if (error.code === 50013) {
            if (!interaction.replied && !interaction.deferred) {
              await interaction.reply({
                content:
                  "Contact un mod√©rateur avec l'erreur suivante : Le bot doit √™tre `tout en haut` dans la liste des r√¥les du serveur. N'oublie pas de me mettre `administrateur`.\nUne fois que c'est fait tu pourras valid√© le r√®glement !",
                ephemeral: true,
              });
            } else if (interaction.deferred || interaction.replied) {
              await interaction.followUp({
                content:
                  "Contact un mod√©rateur avec l'erreur suivante : Le bot doit √™tre `tout en haut` dans la liste des r√¥les du serveur. N'oublie pas de me mettre `administrateur`.\nUne fois que c'est fait tu pourras valid√© le r√®glement !",
                ephemeral: true,
              });
            }
          } else {
            console.error(error);
          }
        }
      }
    }

    //Bouton pour Ticket => Cr√©ation salon avec fermeture une fois termin√©.
    if (interaction.customId === "CREATE_CHANNEL") {
      const serverConfig = await mongoose
        .model("ServerConfig")
        .findOne({ serverID: interaction.guild.id });
      const DisboardBOTId = "302050872383242240";
      const AdminRoleID = serverConfig.ticketAdminRoleID;
      await interaction.deferReply({ ephemeral: true });

      const parentChannel = interaction.channel;

      let permissionOverwrites = [
        {
          id: interaction.guild.roles.everyone.id,
          deny: [PermissionsBitField.Flags.ViewChannel],
        },
        {
          id: interaction.user,
          allow: [
            PermissionsBitField.Flags.SendMessages,
            PermissionsBitField.Flags.ViewChannel,
          ],
        },
        {
          id: DisboardBOTId,
          deny: [PermissionsBitField.Flags.ViewChannel],
        },
      ];

      if (AdminRoleID) {
        permissionOverwrites.push({
          id: AdminRoleID,
          allow: [
            PermissionsBitField.Flags.SendMessages,
            PermissionsBitField.Flags.ViewChannel,
          ],
        });
      }

      let channel = await interaction.guild.channels.create({
        name: `üé´‰∏®ùêìicket‰∏®${interaction.user.username}`,
        parent: parentChannel.parentId,
        type: ChannelType.GuildText,
        permissionOverwrites: permissionOverwrites,
      });

      const clearembed = new EmbedBuilder()
        .setDescription(
          `${interaction.user}\n‰∏®ùêìon dossier va √™tre √©tudi√©, __merci d'√™tre patient__, notre √©quipe s'occupe de tout !`
        )
        .setColor("Blue");

      const deletebutton = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId("DELETE_TICKET")
          .setEmoji("‚ùå")
          .setLabel("Supprimer le ticket")
          .setStyle(ButtonStyle.Danger)
      );

      await channel.send({
        embeds: [clearembed],
        components: [deletebutton],
      });

      if (!AdminRoleID) {
        await channel.send(
          "‚ö†‰∏®__**Attention**__‰∏®Le r√¥le d'administrateur __n'est pas__ d√©fini pour la gestion des tickets. Un mod√©rateur vient d'√™tre contact√© pour trait√© le probl√®me dans les plus bref d√©lais, d√©sol√© de l'attente."
        );
      }

      await interaction.editReply({
        content: "Ticket cr√©√© avec succ√®s !",
      });
    }
    if (interaction.customId === "DELETE_TICKET") {
      const surbutton = new ActionRowBuilder()
        .addComponents(
          new ButtonBuilder()
            .setCustomId("VALID_DELETE")
            .setLabel("Oui")
            .setStyle(ButtonStyle.Danger)
        )
        .addComponents(
          new ButtonBuilder()
            .setCustomId("PAS_SUPPRIMER")
            .setLabel("Non")
            .setStyle(ButtonStyle.Primary)
        );

      await interaction.reply({
        content: "**Es-tu sur de vouloir supprimer ce ticket ?**",
        components: [surbutton],
        ephemeral: true,
      });
    }
    if (interaction.customId === "VALID_DELETE") {
      await interaction.guild.channels.delete(interaction.channel);
    }

    // Boutton suggestion
    if (interaction.customId === "ACCEPTSUGG") {
      const serverConfig = await ServerConfig.findOne({
        serverID: interaction.guild.id,
      });

      if (!serverConfig || !serverConfig.logChannelID) {
        return;
      }

      const messageVotes = usersVoted.get(interaction.message.id) || new Map();

      if (messageVotes.has(interaction.user.id)) {
        const previousVote = messageVotes.get(interaction.user.id);
        const alreadyVotedMessage =
          previousVote === "ACCEPTSUGG"
            ? "Eh non! Tu as d√©j√† vot√© `POUR` √† cette suggestion !"
            : "Eh non! Tu as d√©j√† vot√© `CONTRE` √† cette suggestion !";

        await interaction.reply({
          content: alreadyVotedMessage,
          ephemeral: true,
        });
        return;
      }

      messageVotes.set(interaction.user.id, interaction.customId);
      usersVoted.set(interaction.message.id, messageVotes);

      const embed = interaction.message.embeds[0];
      const indexToUpdate = interaction.customId === "ACCEPTSUGG" ? 1 : 2;

      const newFieldValue = parseInt(embed.fields[indexToUpdate].value) + 1;
      embed.fields[indexToUpdate].value = newFieldValue.toString();

      const updatedEmbed = new EmbedBuilder()
        .setColor(embed.color)
        .setTitle(embed.title)
        .setDescription(embed.description)
        .setThumbnail(embed.thumbnail.url)
        .addFields(embed.fields);

      await interaction.message.edit({ embeds: [updatedEmbed] });

      await interaction.reply({
        content: `**Merci. Ton vote √† bien √©t√© pris en compte. N'h√©site surtout pas √† commenter ton choix dans le __fil__ de la suggestion. :bulb:**`,
        ephemeral: true,
      });

      const ACCEPTSUGGLOG = new EmbedBuilder()
        .setColor("Blue")
        .setTitle(
          `:ok:‰∏®ùêïient de r√©agir __positivement__ √† la suggestion :\n\n\`"${embed.description}"\`.`
        )
        .setAuthor({
          name: interaction.user.username,
          iconURL: interaction.user.displayAvatarURL({ dynamic: true })
        })
        .setTimestamp();

      const logChannel = bot.channels.cache.get(serverConfig.logChannelID);
      logChannel.send({ embeds: [ACCEPTSUGGLOG] });
    }
    if (interaction.customId === "NOPSUGG") {
      const serverConfig = await ServerConfig.findOne({
        serverID: interaction.guild.id,
      });

      if (!serverConfig || !serverConfig.logChannelID) {
        return;
      }

      const messageVotes = usersVoted.get(interaction.message.id) || new Map();

      if (messageVotes.has(interaction.user.id)) {
        const previousVote = messageVotes.get(interaction.user.id);
        const alreadyVotedMessage =
          previousVote === "ACCEPTSUGG"
            ? "Eh non! Tu as d√©j√† vot√© `POUR` √† cette suggestion !"
            : "Eh non! Tu as d√©j√† vot√© `CONTRE` √† cette suggestion !";

        await interaction.reply({
          content: alreadyVotedMessage,
          ephemeral: true,
        });
        return;
      }

      messageVotes.set(interaction.user.id, interaction.customId);
      usersVoted.set(interaction.message.id, messageVotes);

      const embed = interaction.message.embeds[0];
      const indexToUpdate = interaction.customId === "ACCEPTSUGG" ? 1 : 2;

      const newFieldValue = parseInt(embed.fields[indexToUpdate].value) + 1;
      embed.fields[indexToUpdate].value = newFieldValue.toString();

      const updatedEmbed = new EmbedBuilder()
        .setColor(embed.color)
        .setTitle(embed.title)
        .setDescription(embed.description)
        .setThumbnail(embed.thumbnail.url)
        .addFields(embed.fields);

      await interaction.message.edit({ embeds: [updatedEmbed] });

      await interaction.reply({
        content: `**Merci. Ton vote √† bien √©t√© pris en compte. N'h√©site surtout pas √† commenter ton choix dans le __fil__ de la suggestion. :bulb:**`,
        ephemeral: true,
      });

      const NOPSUGGLOG = new EmbedBuilder()
        .setColor("Blue")
        .setTitle(
          `:x:‰∏®ùêïient de r√©agir __n√©gativement__ √† la suggestion :\n\n\`"${embed.description}"\`.`
        )
        .setAuthor({
          name: interaction.user.username,
          iconURL: interaction.user.displayAvatarURL({ dynamic: true })
        })
        .setTimestamp();

      const logChannel = bot.channels.cache.get(serverConfig.logChannelID);
      logChannel.send({ embeds: [NOPSUGGLOG] });
    }

    //Gestion du SetConfig
    if (interaction.customId === "LOG_BUTTON") {
      const message = await interaction.reply({
        content:
          "Merci de **r√©pondre** avec le nom __exact__ ou l'ID du salon de `ùêãog` d√©sir√©.",
        fetchReply: true,
      });
      const serverId = interaction.guild.id;
      logRequestMessageIds[serverId] = message.id;
      setTimeout(() => {
        message.delete();
      }, 60000);
    }
    if (interaction.customId === "ROLES_LISTE") {
      const serverRoles = await ServerRole.findOne({
        serverID: interaction.guild.id,
      });

      const rowRolesListe = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId("ROLES_PERSOLISTE")
          .setEmoji("üñåÔ∏è")
          .setLabel("Modifi√© les r√¥les")
          .setStyle(ButtonStyle.Secondary)
      );

      if (!serverRoles) {
        return interaction.reply({
          content: "Il n'y a pas de r√¥les stock√©s pour ce serveur.",
          components: [rowRolesListe],
        });
      }

      const levels = [1, 2, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50];

      const prestige0Roles = serverRoles.prestige0Roles
        .map(
          (id, index) =>
            `Niveau ${levels[index]} | ${
              interaction.guild.roles.cache.get(id)?.toString() ||
              "R√¥le inconnu"
            }`
        )
        .join("\n");
      const prestige1Roles = serverRoles.prestige1Roles
        .map(
          (id, index) =>
            `Niveau ${levels[index]} | ${
              interaction.guild.roles.cache.get(id)?.toString() ||
              "R√¥le inconnu"
            }`
        )
        .join("\n");

      const roleEmbed = new EmbedBuilder()
        .setTitle("Liste des R√¥les")
        .setColor("#b3c7ff")
        .setDescription(
          `__**R√¥les Prestige 0 :**__\n ${prestige0Roles}\n\n__**R√¥les Prestige 1 :**__\n ${prestige1Roles}`
        );

      interaction.reply({ embeds: [roleEmbed], components: [rowRolesListe] });
    }
    if (interaction.customId === "ROLES_PERSOLISTE") {
      let currentPrestige = "prestige0Roles";
      await interaction.reply(
        "Veuillez **r√©pondre** avec les r√¥les personnalis√©s pour le prestige `0` (Niveau avant le prestige `1`). Vous pouvez entrer jusqu'√† 12 r√¥les, s√©par√©s par des virgules. (123456789, 123456789 etc ... )"
      );

      const collector = interaction.channel.createMessageCollector({
        filter: (m) => m.author.id === interaction.user.id,
        time: 60000,
      });

      collector.on("collect", async (m) => {
        const roles = m.content.split(",").map((role) => role.trim());

        if (roles.length > 12) {
          interaction.followUp(
            "Vous avez entr√© trop de r√¥les. Veuillez entrer jusqu'√† 12 r√¥les __maximum__."
          );
          return;
        }

        const rolesInGuild = interaction.guild.roles.cache.map(
          (role) => role.id
        );
        const rolesExist = roles.every((role) => rolesInGuild.includes(role));

        if (!rolesExist) {
          interaction.followUp(
            "Un ou plusieurs r√¥les que vous avez entr√©s n'existent pas sur ce serveur. Veuillez v√©rifier les ID's des r√¥les et r√©essayer."
          );
          return;
        }

        let server = await ServerRole.findOne({
          serverID: interaction.guild.id,
        });

        if (!server) {
          server = new ServerRole({
            serverID: interaction.guild.id,
            serverName: interaction.guild.name,
            prestige0Roles: [],
            prestige1Roles: [],
          });
        }
        server[currentPrestige] = roles;
        await server.save();

        if (currentPrestige === "prestige0Roles") {
          interaction.followUp(
            "R√¥les pour le prestige `0` enregistr√©s avec succ√®s ! Veuillez maintenant entrer les r√¥les pour le prestige `1`. N'oubliez pas, vous pouvez entrer jusqu'√† 12 r√¥les, s√©par√©s par des virgules."
          );
          currentPrestige = "prestige1Roles";
        } else {
          interaction.followUp(
            "**Tous les r√¥les ont √©t√© enregistr√©s avec succ√®s !**"
          );
          collector.stop();
        }
      });

      collector.on("end", (collected, reason) => {
        if (reason === "time") {
          interaction.followUp(
            "__**Le temps pour entrer les r√¥les est √©coul√©. Veuillez r√©essayer.**__"
          );
        }
      });
    }
    if (interaction.customId === "WELCOME_BUTTON") {
      const message = await interaction.reply({
        content:
          "Merci de **r√©pondre** avec le nom __exact__ ou l'ID du salon de `ùêÅienvenue` d√©sir√©.",
        fetchReply: true,
      });
      const serverId = interaction.guild.id;
      welcomeRequestMessageIds[serverId] = message.id;
    }
    if (interaction.customId === "REGL_BUTTON") {
      const message = await interaction.reply({
        content:
          "Merci de r√©pondre avec le nom __exact__ ou l'ID du salon de `ùêë√®glement` d√©sir√©.",
        fetchReply: true,
      });
      const serverId = interaction.guild.id;
      reglementRequestMessageIds[serverId] = message.id;
      setTimeout(() => {
        message.delete();
      }, 60000);
    }
    if (interaction.customId === "REGL_PUSH") {
      let serverConfig = await ServerConfig.findOne({
        serverID: interaction.guild.id,
      });
      if (!serverConfig || !serverConfig.reglementChannelID) {
        return interaction.reply({
          content:
            "Aucun salon de ùêë√®glement n'est configur√© pour ce serveur. Veuillez en __configurer__ un en s√©l√©ctionnant `Modifi√© Salon`.",
          ephemeral: true,
        });
      }

      const Reglementembed = new EmbedBuilder()
        .setColor("#b3c7ff")
        .setTitle(
          `*_~ùêë√®glement de la ${interaction.guild.name} pour votre bonne formation~_*`
        )
        .setDescription(
          `\n**Merci de bien vouloir lire toute les r√®gles ainsi que de les respecter !**\n\n:wave:\`‰∏®ùêÅienvenue :\` \nTout d'abord bienvenue parmi nous. Tu peux √† pr√©sent lire et valider le r√®glement puis choisir tes r√¥les dans le salon \`R√¥les\`. Si tu es un streamer, tu peux obtenir le r√¥le \`Streamer\` pour avoir les notifications de TES lives sur notre serveur ! Pour toute demande, informations ou signalement, tu peux ouvrir un ticket dans le \`salon pr√©vu √† cet effet\`, un mod√©rateur se fera un plaisir de te r√©pondre.\n\n:rotating_light:\`‰∏®ùêåentions :\`\n √âvitez les mentions inutiles et \`r√©fl√©chissez\` avant de poser une question. Vous n'√™tes pas seuls et les r√©ponses ont souvent d√©j√† √©t√© donn√©es. Il sera punissable d'une \`exclusion\` et/ou d'un \`bannissement\` avec sursis.\n\n:warning:\`‰∏®ùêèublicit√©s :\`\n Toute publicit√© \`non autoris√©\` par un membre du staff est \`strictement interdite\` sur le serveur mais √©galement par message priv√©. Il sera punissable d'une \`exclusion\` et/ou d'un \`bannissement\` avec sursis.\n\n:underage:\`‰∏®ùêçSFW :\`\nNSFW, NSFL et le contenu malsain n'est \`pas autoris√©\` sur le serveur. Il sera punissable d'un \`bannissement\` !\n\n:flag_fr:\`‰∏®ùêÖran√ßais :\`\nLa structure est \`francophone\`, veuillez donc √©crire fran√ßais uniquement pour une compr√©hension facile de tous les membres de la communaut√©. Il sera punissable si les avertissements sont r√©p√©t√©s et non √©cout√©s.`
        )
        .setThumbnail(interaction.guild.iconURL())
        .setFooter({
          text: `Cordialement l'√©quipe ${interaction.guild.name}`,
          iconURL: interaction.guild.iconURL(),
        });

      const rowValidRegl = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId("VALID_REGL")
          .setLabel("üìù‰∏®ùêïalider le ùêë√®glement‰∏®üìù")
          .setStyle(ButtonStyle.Success)
      );
      const ReglementChannel = bot.channels.cache.get(
        serverConfig.reglementChannelID
      );
      if (ReglementChannel) {
        ReglementChannel.send({
          embeds: [Reglementembed],
          components: [rowValidRegl],
        });
      }
    }
    if (interaction.customId === "REGL_ROLE") {
      const message = await interaction.reply({
        content:
          "\n__**N'OUBLIE PAS DE ME METTRE TOUT EN HAUT DANS LA LISTE DE TES R√ñLES.**__\n\nMerci de **r√©pondre** en faisant un tag (@votre_r√¥le) pour donner le r√¥le lorsque votre utilisateur validera le `ùêë√®glement`.",
        fetchReply: true,
      });
      const serverId = interaction.guild.id;
      RolereglementRequestMessageIds[serverId] = message.id;
      setTimeout(() => {
        message.delete();
      }, 60000);
    }
    if (interaction.customId === "WELCOME_ROLE") {
      const message = await interaction.reply({
        content:
          "\n__**N'OUBLIE PAS DE ME METTRE TOUT EN HAUT DANS LA LISTE DE TES R√ñLES.**__\n\nMerci de **r√©pondre** en faisant un tag (@votre_r√¥le) pour donner le r√¥le lorsque votre utilisateur validera le `ùêë√®glement`.",
        fetchReply: true,
      });
      const serverId = interaction.guild.id;
      RoleWelcomeRequestMessageIds[serverId] = message.id;
      setTimeout(() => {
        message.delete();
      }, 60000);
    }
    if (interaction.customId === "IMPLICATION_BUTTON") {
      const message = await interaction.reply({
        content:
          "Merci de **r√©pondre** avec le nom __exact__ ou l'ID du salon pour `ùêàmplications` d√©sir√©.",
        fetchReply: true,
      });
      const serverId = interaction.guild.id;
      implicationRequestMessageIds[serverId] = message.id;
    }
    if (interaction.customId === "DAILY_BUTTON") {
      const message = await interaction.reply({
        content:
          "Merci de **r√©pondre** avec le nom __exact__ ou l'ID du salon pour le `ùêÉaily` d√©sir√©.",
        fetchReply: true,
      });
      const serverId = interaction.guild.id;
      dailyRequestMessageIds[serverId] = message.id;
    }
    if (interaction.customId === "DAILY_PUSH") {
      let serverConfig = await ServerConfig.findOne({
        serverID: interaction.guild.id,
      });
      if (!serverConfig || !serverConfig.dailyChannelID) {
        return interaction.reply({
          content:
            "Aucun salon pour le ùêÉaily n'est configur√© pour ce serveur. Veuillez en __configurer__ un en s√©l√©ctionnant `Modifi√© Salon`.",
          ephemeral: true,
        });
      }
      const DailyEmbed = new EmbedBuilder()
        .setColor("Orange")
        .setTitle(`‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï‚àà ùêÜain d'ùêóùêè journalier ! ‚àã‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï`)
        .setDescription(
          `\nùêÇ'est ici que tu peux r√©cup√©rer ton \`ùêÉaily\`. ùêàl sera disponible √† nouveau apr√®s \`23H\`. ùêçe l'oublie pas, lui en tout cas ne t'oublieras pas haha.`
        )
        .setThumbnail(interaction.guild.iconURL())
        .setFooter({
          text: `ùêÇordialement l'√©quipe ${interaction.guild.name}`,
          iconURL: interaction.guild.iconURL(),
        });

      const rowPushDaily = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId("DAILYXP")
          .setLabel("üí∏‰∏®ùêë√©cup√©rer l'ùêóùêè‰∏®üí∏")
          .setStyle(ButtonStyle.Success)
      );
      const dailyChannel = bot.channels.cache.get(serverConfig.dailyChannelID);
      if (dailyChannel) {
        dailyChannel.send({
          embeds: [DailyEmbed],
          components: [rowPushDaily],
        });
      }
    }
    if (interaction.customId === "SUGG_BUTTON") {
      const message = await interaction.reply({
        content:
          "Merci de **r√©pondre** avec le nom __exact__ ou l'ID du salon pour les `ùêíuggestions` d√©sir√©.",
        fetchReply: true,
      });
      const serverId = interaction.guild.id;
      suggestionsRequestMessageIds[serverId] = message.id;
    }
    if (interaction.customId === "ROLECHANNEL_BUTTON") {
      const message = await interaction.reply({
        content:
          "Merci de r√©pondre avec le nom __exact__ ou l'ID du salon pour les `ùêëoles`.",
        fetchReply: true,
      });
      const serverId = interaction.guild.id;
      roleChannelRequestMessageIds[serverId] = message.id;
      setTimeout(() => {
        message.delete();
      }, 60000);
    }
    if (interaction.customId === "TICKET_BUTTON") {
      const message = await interaction.reply({
        content:
          "Merci de r√©pondre avec le nom __exact__ ou l'ID du salon pour les `ùêìickets`.",
        fetchReply: true,
      });
      const serverId = interaction.guild.id;
      ticketRequestMessageIds[serverId] = message.id;
      setTimeout(() => {
        message.delete();
      }, 60000);
    }
    if (interaction.customId === "TICKET_PUSH") {
      let serverConfig = await ServerConfig.findOne({
        serverID: interaction.guild.id,
      });
      if (!serverConfig || !serverConfig.ticketChannelID) {
        return interaction.reply({
          content:
            "Aucun salon pour les ùêìickets n'est configur√© pour ce serveur. Veuillez en __configurer__ un en s√©l√©ctionnant `Modifi√© Salon`.",
          ephemeral: true,
        });
      }
      const TicketEmbed = new EmbedBuilder()
        .setColor("#b3c7ff")
        .setTitle(`‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï :inbox_tray: ùêéuvrir un ùêìicket :inbox_tray: ‚Äï‚Äï‚Äï‚Äï‚Äï‚Äï`)
        .setDescription(
          `\n**ùêåerci de respecter les r√®gles concernant les \`ùêìickets\` !**\n\n\`1.\` ùêçe pas cr√©er de ticket sans raison.\n\n\`2.\` ùêçe pas mentionner le staff sauf si vous n'avez pas eu de r√©ponse durant 24h.\n\n\`3.\` ùêçe pas cr√©er de ticket pour insulter le staff ou une autre personne.`
        )
        .setThumbnail(interaction.guild.iconURL())
        .setFooter({
          text: `ùêÇordialement, l'√©quipe ${interaction.guild.name}`,
          iconURL: interaction.guild.iconURL(),
        });

      const rowPushTicket = new ActionRowBuilder().addComponents(
        new ButtonBuilder()
          .setCustomId("CREATE_CHANNEL")
          .setLabel("üé´‰∏®ùêÇr√©er un ùêìicket‰∏®üé´")
          .setStyle(ButtonStyle.Primary)
      );
      const ticketChannel = bot.channels.cache.get(
        serverConfig.ticketChannelID
      );
      if (ticketChannel) {
        ticketChannel.send({
          embeds: [TicketEmbed],
          components: [rowPushTicket],
        });
        return interaction.reply({ content: "Embed cr√©e.", ephemeral: true });
      }
    }
    if (interaction.customId === "TICKET_ROLE") {
      const message = await interaction.reply({
        content:
          "\n__**N'OUBLIE PAS DE ME METTRE TOUT EN HAUT DANS LA LISTE DE TES R√ñLES.**__\n\nMerci de **r√©pondre** en faisant un tag (@votre_r√¥le) pour rentrer le r√¥le d'administration de votre serveur.",
        fetchReply: true,
      });
      const serverId = interaction.guild.id;
      RoleAdminRequestMessageIds[serverId] = message.id;
      setTimeout(() => {
        message.delete();
      }, 60000);
    }

    //Bouton suppresion de donn√©es dans la bdd pour la r√©initialis√©
    if (interaction.customId === "LOG_DESAC") {
      const serverID = interaction.guild.id;
      const serverConfig = await ServerConfig.findOne({ serverID: serverID });
    
      if (!serverConfig) {
        console.error('ServerConfig not found for server ID:', serverID);
        return;
      }
    
      serverConfig.logChannelID = null;
      serverConfig.logChannelName = null;
    
      try {
        await serverConfig.save();
        await interaction.reply('Le __salon__ des ùêãog a √©t√© r√©initialis√© avec succ√®s !');
      } catch (error) {
        console.error('Error updating ServerConfig:', error);
      }
    }
    if (interaction.customId === "ROLECHANNEL_DESAC") {
      const serverID = interaction.guild.id;
      const serverConfig = await ServerConfig.findOne({ serverID: serverID });
    
      if (!serverConfig) {
        console.error('ServerConfig not found for server ID:', serverID);
        return;
      }
    
      serverConfig.roleChannelID = null;
      serverConfig.roleChannelName = null;
    
      try {
        await serverConfig.save();
        await interaction.reply('Le __salon__ des ùêë√¥les a √©t√© r√©initialis√© avec succ√®s !');
      } catch (error) {
        console.error('Error updating ServerConfig:', error);
      }
    }
    if (interaction.customId === "REGL_DESAC") {
      const serverID = interaction.guild.id;
      const serverConfig = await ServerConfig.findOne({ serverID: serverID });
    
      if (!serverConfig) {
        console.error('ServerConfig not found for server ID:', serverID);
        return;
      }
    
      serverConfig.reglementChannelID = null;
      serverConfig.reglementChannelName = null;
      serverConfig.roleReglementID = null;
      serverConfig.roleReglementName = null;
    
      try {
        await serverConfig.save();
        await interaction.reply('Le __salon__ ainsi que le __r√¥le__ du ùêë√®glement a √©t√© r√©initialis√© avec succ√®s !');
      } catch (error) {
        console.error('Error updating ServerConfig:', error);
      }
    }
    if (interaction.customId === "WELCOME_DESAC") {
      const serverID = interaction.guild.id;
      const serverConfig = await ServerConfig.findOne({ serverID: serverID });
    
      if (!serverConfig) {
        console.error('ServerConfig not found for server ID:', serverID);
        return;
      }
    
      serverConfig.welcomeChannelID = null;
      serverConfig.welcomeChannelName = null;
      serverConfig.roleWelcomeID = null;
      serverConfig.roleWelcomeName = null;
    
      try {
        await serverConfig.save();
        await interaction.reply('Le __salon__ ainsi que le __r√¥le__ de ùêñelcome ont √©t√© r√©initialis√©es avec succ√®s !');
      } catch (error) {
        console.error('Error updating ServerConfig:', error);
      }
    }
    if (interaction.customId === "IMPLICATION_DESAC") {
      const serverID = interaction.guild.id;
      const serverConfig = await ServerConfig.findOne({ serverID: serverID });
    
      if (!serverConfig) {
        console.error('ServerConfig not found for server ID:', serverID);
        return;
      }
    
      serverConfig.implicationsChannelID = null;
      serverConfig.implicationsChannelName = null;
    
      try {
        await serverConfig.save();
        await interaction.reply('Le __salon__ pour l\'ùêàmplications a √©t√© r√©initialis√© avec succ√®s !');
      } catch (error) {
        console.error('Error updating ServerConfig:', error);
      }
    }
    if (interaction.customId === "SUGG_DESAC") {
      const serverID = interaction.guild.id;
      const serverConfig = await ServerConfig.findOne({ serverID: serverID });
    
      if (!serverConfig) {
        console.error('ServerConfig not found for server ID:', serverID);
        return;
      }
    
      serverConfig.suggestionsChannelID = null;
      serverConfig.suggestionsChannelName = null;
    
      try {
        await serverConfig.save();
        await interaction.reply('Le __salon__ pour les ùêíuggestions a √©t√© r√©initialis√© avec succ√®s !');
      } catch (error) {
        console.error('Error updating ServerConfig:', error);
      }
    }
    if (interaction.customId === "DAILY_DESAC") {
      const serverID = interaction.guild.id;
      const serverConfig = await ServerConfig.findOne({ serverID: serverID });
    
      if (!serverConfig) {
        console.error('ServerConfig not found for server ID:', serverID);
        return;
      }
    
      serverConfig.dailyChannelID = null;
      serverConfig.dailyChannelName = null;
    
      try {
        await serverConfig.save();
        await interaction.reply('Le __salon__ pour le ùêÉaily a √©t√© r√©initialis√© avec succ√®s !');
      } catch (error) {
        console.error('Error updating ServerConfig:', error);
      }
    }
    if (interaction.customId === "ROLES_DESAC") {

    }
    if (interaction.customId === "TICKET_DESAC") {
      const serverID = interaction.guild.id;
      const serverConfig = await ServerConfig.findOne({ serverID: serverID });
    
      if (!serverConfig) {
        console.error('ServerConfig not found for server ID:', serverID);
        return;
      }
    
      serverConfig.ticketChannelID = null;
      serverConfig.ticketChannelName = null;
      serverConfig.ticketAdminRoleID = null;
      serverConfig.ticketAdminRoleName = null;
    
      try {
        await serverConfig.save();
        await interaction.reply('Le __salon__ et le __r√¥le admin__ pour les ùêìicket a √©t√© r√©initialis√© avec succ√®s !');
      } catch (error) {
        console.error('Error updating ServerConfig:', error);
      }
    }

    //Bouton supprim√© suggestion
    if (interaction.customId === "SUPPSUGG") {
      const serverConfig = await ServerConfig.findOne({
        serverID: interaction.guild.id,
      });

      if (!serverConfig || !serverConfig.ticketAdminRoleID) {
        return interaction.reply({
          content:
            "**Action impossible car la configuration du r√¥le administrateur n'a pas √©t√© d√©fini dans le `/setconfig`.**",
          ephemeral: true,
        });
      }

      const member = interaction.guild.members.cache.get(interaction.user.id);
      const adminRole = interaction.guild.roles.cache.get(
        serverConfig.ticketAdminRoleID
      );

      if (!adminRole || !member.roles.cache.has(adminRole.id)) {
        return interaction.reply({
          content:
            "D√©sol√©, mais tu n'as pas la permission d'utiliser ce bouton.",
          ephemeral: true,
        });
      }
      const thread = channel.threads.cache.find((x) => x.name === "food-talk");

      if (interaction.channel.thread) {
        await thread.delete();
      } else {
        await interaction.message.delete();
      }

      return interaction.reply({
        content: "La suggestion et le thread associ√© ont √©t√© supprim√©s.",
        ephemeral: true,
      });
    }

    //Bouton Classement G√©n√©ral
    if (interaction.customId === "LADDER_BUTTON") {
      const guild = interaction.guild;
      const topUsers = await User.find({ serverID: guild.id })
        .sort({ prestige: -1, xp: -1 })
        .limit(10);

      const leaderboardEmbed = new EmbedBuilder()
        .setColor("Gold")
        .setTitle(`Classement du serveur ${guild.name}`)
        .setDescription(
          topUsers
            .map((user, index) => {
              let positionSuffix = "·µâ·µê·µâ";
              let medalEmoji = "";

              switch (index) {
                case 0:
                  positionSuffix = "·µâ ≥";
                  medalEmoji = "ü•á";
                  break;
                case 1:
                  medalEmoji = "ü•à";
                  break;
                case 2:
                  medalEmoji = "ü•â";
                  break;
              }

              return `\n**${index + 1}${positionSuffix} ${medalEmoji}** __**${
                bot.users.cache.get(user.userID)?.username ||
                "Utilisateur inconnu"
              }**__ ‰∏® Prestige: **\`${
                user.prestige
              }\`** - XP: **\`${user.xp.toLocaleString()}\`**`;
            })
            .join("\n")
        )
        .setThumbnail(guild.iconURL({ dynamic: true }));

      await interaction.reply({ embeds: [leaderboardEmbed] });
      setTimeout(async () => {
        const message = await interaction.fetchReply();
        message.delete();
      }, 15000);
    }

    function padNumber(number) {
      return number < 10 ? `0${number}` : number;
    }
    
    // Bouton Vocal Time
    if (interaction.customId === "VOCAL_TIME_BUTTON") {
      const userId = interaction.user.id;
      const serverId = interaction.guild.id;

      User.findOne({ userID: userId, serverID: serverId }, (err, user) => {
        if (err) {
          console.error(err);
          interaction.reply({ content: "Une erreur est survenue lors de la r√©cup√©ration des donn√©es.", ephemeral: true });
          return;
        }

        if (!user) {
          interaction.reply({ content: "Impossible de trouver les donn√©es de l'utilisateur.", ephemeral: true });
          return;
        }

        const totalSeconds = user.voiceTime;
        const days = Math.floor(totalSeconds / (24 * 60 * 60));
        const hours = padNumber(Math.floor((totalSeconds % (24 * 60 * 60)) / (60 * 60)));
        const minutes = padNumber(Math.floor((totalSeconds % (60 * 60)) / 60));
        const seconds = padNumber(Math.floor(totalSeconds % 60));

        let timeString = '';
        if (days > 0) timeString += `\`${days} jour${days > 1 ? 's' : ''}\`, `;
        if (hours > 0 || days > 0) timeString += `\`${hours} heure${hours > 1 ? 's' : ''}\`, `;
        if (minutes > 0 || hours > 0 || days > 0) timeString += `\`${minutes} minute${minutes > 1 ? 's' : ''}\` et `;
        timeString += `\`${seconds} seconde${seconds > 1 ? 's' : ''}\``;

        interaction.reply({ content: `Temps pass√© en vocal: ${timeString}.`, ephemeral: true });
      });
    }

    //Bouton lancer une recherche Apex Legends
    if (interaction.customId === "SEARCHMATE_APEX_BUTTON") {

      const existingMessage = await SearchMateMessage.findOne({ userId: interaction.user.id, guildId: interaction.guild.id });
      if (existingMessage) {
          return interaction.reply({ content: 'Doucement, attends tranquillement ! Prends toi un coca et respire.', ephemeral: true });
      }
  
      const apexRole = interaction.guild.roles.cache.find(role => role.name === "Apex Legends");
      const embed = new EmbedBuilder()
          .setTitle('ùêëùêÑùêÇùêáùêÑùêëùêÇùêáùêÑ ùêÉùêÑ ùêåùêÄùêìùêÑ !')
          .setDescription(`${apexRole}\n\`${interaction.user.username}\` recherche son mate pour **Apex Legends** !`)
          .setColor('Red')
          .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }));
  
      const sentMessageResponse = await interaction.reply({embeds: [embed]});
      const sentMessage = sentMessageResponse instanceof require('discord.js').Message ? 
                          sentMessageResponse : 
                          await interaction.fetchReply();
  
      const sentMessageId = sentMessage.id;
      
      const newSearchMessage = new SearchMateMessage({
          userId: interaction.user.id,
          guildId: interaction.guild.id,
          channelId: interaction.channel.id,
          messageId: sentMessageId,
      });
      await newSearchMessage.save();
  
      let timeLeft = 30 * 60;
  
      const formatTime = (time) => {
        const minutes = Math.floor(time / 60);
    
        if (minutes === 0) return 'ùêêuelques secondes...';
    
        return `${minutes.toString().padStart(2, '0')} minute${minutes > 1 ? 's' : ''}`;
    };
  
      const timerId = setInterval(async () => {
          timeLeft -= 60;
  
          embed.setFooter({
              text: `Temps restant : ${formatTime(timeLeft)}`,
              iconURL: interaction.guild.iconURL(),
          });
          await sentMessage.edit({ embeds: [embed] });
  
          if (timeLeft <= 0) {
              clearInterval(timerId);
              try {
                  await sentMessage.delete();
                  await SearchMateMessage.deleteOne({ _id: newSearchMessage._id });
              } catch (error) {
                  console.error('[APEX SEARCH] Erreur lors de la suppression du message :', error);
              }
          }
      }, 60000);
    }

    //Bouton lancer une recherche Call of Duty
    if (interaction.customId === "SEARCHMATE_COD_BUTTON") {

      const existingMessage = await SearchMateMessage.findOne({ userId: interaction.user.id, guildId: interaction.guild.id });
      if (existingMessage) {
          return interaction.reply({ content: 'Doucement, attends tranquillement ! Prends toi un coca et respire.', ephemeral: true });
      }
  
      const codRole = interaction.guild.roles.cache.find(role => role.name === "Call of Duty");
      const embed = new EmbedBuilder()
          .setTitle('ùêëùêÑùêÇùêáùêÑùêëùêÇùêáùêÑ ùêÉùêÑ ùêåùêÄùêìùêÑ !')
          .setDescription(`${codRole}\n\`${interaction.user.username}\` recherche son mate pour **Call of Duty** !`)
          .setColor('Red')
          .setThumbnail(interaction.user.displayAvatarURL({ dynamic: true }));
  
      const sentMessageResponse = await interaction.reply({embeds: [embed]});
      const sentMessage = sentMessageResponse instanceof require('discord.js').Message ? 
                          sentMessageResponse : 
                          await interaction.fetchReply();
  
      const sentMessageId = sentMessage.id;
      
      const newSearchMessage = new SearchMateMessage({
          userId: interaction.user.id,
          guildId: interaction.guild.id,
          channelId: interaction.channel.id,
          messageId: sentMessageId,
      });
      await newSearchMessage.save();
  
      let timeLeft = 30 * 60;
  
      const formatTime = (time) => {
        const minutes = Math.floor(time / 60);
    
        if (minutes === 0) return 'ùêêuelques secondes...';
    
        return `${minutes.toString().padStart(2, '0')} minute${minutes > 1 ? 's' : ''}`;
    };
  
      const timerId = setInterval(async () => {
          timeLeft -= 60;
  
          embed.setFooter({
              text: `Temps restant : ${formatTime(timeLeft)}`,
              iconURL: interaction.guild.iconURL(),
          });
          await sentMessage.edit({ embeds: [embed] });
  
          if (timeLeft <= 0) {
              clearInterval(timerId);
              try {
                  await sentMessage.delete();
                  await SearchMateMessage.deleteOne({ _id: newSearchMessage._id });
              } catch (error) {
                  console.error('[COD SEARCH] Erreur lors de la suppression du message :', error);
              }
          }
      }, 60000);
    }

    //Bouton pour cr√©e un vocal pour Apex Legends
    if (interaction.customId === "OPENVOC_APEX_BUTTON") {
      const parentChannel = interaction.channel;
    
      const existingChannel = await VocalChannel.findOne({ userId: interaction.user.id, guildId: interaction.guild.id });

      if (existingChannel) {
        return await interaction.reply({
          content: "Toi.. t'es un sacr√© coquin ! Tu as d√©j√† un salon d'ouvert non ?",
          ephemeral: true,
        });
      }
    
      const apexRole = interaction.guild.roles.cache.find(role => role.name === "Apex Legends");
    
      let permissionOverwrites = [
          {
              id: interaction.guild.roles.everyone.id,
              deny: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.Speak, PermissionsBitField.Flags.Connect],
          },
          {
              id: apexRole.id,
              allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.Speak, PermissionsBitField.Flags.Connect],
          }
      ];
    
      try {
          let channel = await interaction.guild.channels.create({
              name: `‰∏®${interaction.user.username}·¥∑·¥º·¥ø·¥æ`,
              parent: parentChannel.parentId,
              type: ChannelType.GuildVoice,
              userLimit: 3,
              permissionOverwrites: permissionOverwrites,
          });
    
          const newVocalChannel = new VocalChannel({
              userId: interaction.user.id,
              guildId: interaction.guild.id,
              channelId: channel.id
          });
          await newVocalChannel.save();
    
          await interaction.reply({ content: 'Ton salon vocal **Apex Legends** a √©t√© cr√©√© avec succ√®s !', ephemeral: true });
      } catch (error) {
          console.error('[APEX VOCAL] Erreur lors de la cr√©ation du canal pour Apex Legends:', error);
          await interaction.reply({ content: '**Erreur lors de la cr√©ation du canal. __Merci__ de patienter...**', ephemeral: true });
      }
    }
    //Bouton pour cr√©e un vocal pour Call of Duty
    if (interaction.customId === "OPENVOC_COD_BUTTON") {
      const parentChannel = interaction.channel;
      const existingChannel = await VocalChannel.findOne({ userId: interaction.user.id, guildId: interaction.guild.id });

      if (existingChannel) {
        return await interaction.reply({
          content: "Toi.. t'es un sacr√© coquin ! Tu as d√©j√† un salon d'ouvert non ?",
          ephemeral: true,
        });
      }
    
      const codRole = interaction.guild.roles.cache.find(role => role.name === "Call of Duty");
      let permissionOverwrites = [
          {
              id: interaction.guild.roles.everyone.id,
              deny: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.Speak, PermissionsBitField.Flags.Connect],
          },
          {
              id: codRole.id,
              allow: [PermissionsBitField.Flags.ViewChannel, PermissionsBitField.Flags.Speak, PermissionsBitField.Flags.Connect],
          }
      ];
    
      try {
          let channel = await interaction.guild.channels.create({
              name: `‰∏®${interaction.user.username}·¥∑·¥º·¥ø·¥æ`,
              parent: parentChannel.parentId,
              type: ChannelType.GuildVoice,
              userLimit: 6,
              permissionOverwrites: permissionOverwrites,
          });
    
          const newVocalChannel = new VocalChannel({
              userId: interaction.user.id,
              guildId: interaction.guild.id,
              channelId: channel.id
          });
          await newVocalChannel.save();
    
          await interaction.reply({ content: 'Ton salon vocal **Call of Duty** a √©t√© cr√©√© avec succ√®s !', ephemeral: true });
      } catch (error) {
          console.error('[COD VOCAL] Erreur lors de la cr√©ation du canal pour Call of Duty:', error);
          await interaction.reply({ content: '**Erreur lors de la cr√©ation du canal. __Merci__ de patienter...**', ephemeral: true });
      }
    }

    // Bouton statistique d'Apex Legends
    if (interaction.customId === 'STATS_APEX_BUTTON') {
      try {
          const discordId = interaction.user.id;
          let user = await ApexStats.findOne({ discordId: discordId });
  
          if (!user) {
              await interaction.reply({ content: "Veuillez fournir votre plateforme et identifiant de jeu...", ephemeral: true });
              const filter = m => m.author.id === discordId;
              const collector = interaction.channel.createMessageCollector({ filter, time: 60000, max: 1 });
  
              collector.on('collect', async (message) => {
                  const [platform, gameUsername] = message.content.split(',').map(item => item.trim());
                  if (!platform || !gameUsername) {
                      return interaction.followUp({ content: 'Les donn√©es fournies sont incorrectes. Assurez-vous de fournir la plateforme et l‚Äôidentifiant de jeu.', ephemeral: true });
                  }
  
                  const server = message.guild.name;
                  user = new ApexStats({ discordId, username: interaction.user.username, server, platform, gameUsername });
                  await user.save();
  
                  interaction.followUp({ content: `Vos informations ont √©t√© enregistr√©es ! Plateforme: ${platform}, Identifiant de jeu: ${gameUsername}` });
              });
  
              collector.on('end', (collected) => {
                  if (collected.size === 0) {
                      interaction.followUp({ content: 'Ehhh le temps est √©coul√©. Clique √† nouveau sur le bouton pour r√©essayer.', ephemeral: true });
                  }
              });
          } else {
              const APEX_API_KEY = config.apex_api;
              const API_URL = `https://api.mozambiquehe.re/bridge?auth=${APEX_API_KEY}&player=${user.gameUsername}&platform=${user.platform}`;
              const response = await axios.get(API_URL);
              const stats = response.data;
  
              const playerName = stats.global.name;
              const level = stats.global.level;
              const selected_legend = stats.legends.selected.LegendName;
              const rank_name = stats.global.rank.rankName;
              const rank_div = stats.global.rank.rankDiv;
              const rank_score = stats.global.rank.rankScore;
              const legend_banner = stats.legends.selected.ImgAssets.banner;
              const rankThumbnail = getRankThumbnail(rank_name);
              const prestigeLevel = stats.global.levelPrestige;
              let levelWithStars = `${level}`;
  
              if (prestigeLevel > 0) {
                  const stars = '‚≠ê'.repeat(prestigeLevel);
                  levelWithStars = `${level} ${stars}`;
              }
  
              let selectedLegendName = stats.legends.selected.LegendName;
  
              if (stats.legends.all[selectedLegendName]) {
                  const trackers = stats.legends.all[selectedLegendName].data;
  
                  if (trackers && trackers.length > 0) {
                      let trackerInfo = "";
                      for (let i = 0; i < trackers.length && i < 3; i++) {
                          let tracker = trackers[i];
                          if (tracker && tracker.name && tracker.value) {
                              let formattedValue = formatNumberWithSpaces(tracker.value);
                              let stylizedName = stylizeFirstLetter(tracker.name);
                              trackerInfo += `**${stylizedName}** : \`${formattedValue}\`\n`;
                          }
                      }
  
                      const Stats_Apex_Embed = new EmbedBuilder()
                          .setTitle(`‚óü**${playerName}**`)
                          .setDescription(`\n\n**ùêçiveaux** : \`${levelWithStars}\`\n**ùêèersonnage** : **\`${selected_legend}\`**\n\n${trackerInfo}\n**ùêëang** : \`${rank_name} ${rank_div}\`\n**ùêícore** : \`${rank_score} / 1000 LP\``)
                          .setImage(legend_banner)
                          .setThumbnail(rankThumbnail)
                          .setColor('Red')
                          .setFooter({
                              text: `Enregistre tes stats sur apexlegendsstatus.com`,
                              iconURL: `https://1000logos.net/wp-content/uploads/2021/06/logo-Apex-Legends.png`,
                          });
                      await interaction.reply({ embeds: [Stats_Apex_Embed], ephemeral: true });
                  } else {
                      await interaction.reply({ content: "**Nous n'avons pas pu trouver les trackers pour ta l√©gende. Rajoute des trackers ou choisis une autre l√©gende.**", ephemeral: true });
                  }
              } else {
                  await interaction.reply({ content: "**La l√©gende s√©lectionn√©e n'est pas pr√©sente dans les donn√©es. Rajoute des trackers ou choisis une autre l√©gende.**", ephemeral: true });
              }
          }
      } catch (error) {
          console.error('Erreur lors de la r√©cup√©ration des donn√©es utilisateur:', error);
          await interaction.reply({ content: "**Pour l'instant, je rencontre des erreurs lors de la r√©cup√©ration de vos informations. R√©essaye plus tard... Ou demain.**", ephemeral: true });
      }
    }
    function formatNumberWithSpaces(num) {
      return num.toLocaleString('fr-FR');
    }
    function stylizeFirstLetter(text) {
      const alphabet = {
          'A': 'ùêÄ', 'B': 'ùêÅ', 'C': 'ùêÇ', 'D': 'ùêÉ', 'E': 'ùêÑ', 'F': 'ùêÖ', 'G': 'ùêÜ', 
          'H': 'ùêá', 'I': 'ùêà', 'J': 'ùêâ', 'K': 'ùêä', 'L': 'ùêã', 'M': 'ùêå', 'N': 'ùêç', 
          'O': 'ùêé', 'P': 'ùêè', 'Q': 'ùêê', 'R': 'ùêë', 'S': 'ùêí', 'T': 'ùêì', 'U': 'ùêî', 
          'V': 'ùêï', 'W': 'ùêñ', 'X': 'ùêó', 'Y': 'ùêò', 'Z': 'ùêô'
      };
  
      const firstLetter = text.charAt(0).toUpperCase();
      if (alphabet[firstLetter]) {
          return text.replace(firstLetter, alphabet[firstLetter]);
      }
      return text;
    }
    function getRankThumbnail(rankName) {
      switch (rankName.toLowerCase()) {
          case 'rookie':
              return 'https://i0.wp.com/www.alphr.com/wp-content/uploads/2022/02/BR_Unranked.png?resize=425%2C425&ssl=1';
          case 'bronze':
              return 'https://apexlegendsstatus.com/assets/badges/badges_new/you_re_tiering_me_apart_bronze_rs15.png';
          case 'silver':
              return 'https://apexlegendsstatus.com/assets/badges/badges_new/you_re_tiering_me_apart_silver_rs7.png';
          case 'gold':
              return 'https://apexlegendsstatus.com/assets/badges/badges_new/you_re_tiering_me_apart_gold_rs7.png';
          case 'platinium':
              return 'https://apexlegendsstatus.com/assets/badges/badges_new/you_re_tiering_me_apart_platinum_rs7.png';
          case 'diamond':
              return 'https://apexlegendsstatus.com/assets/badges/badges_new/you_re_tiering_me_apart_diamond_rs7.png';
          case 'master':
              return 'https://apexlegendsstatus.com/assets/badges/badges_new/you_re_tiering_me_apart_master_rs7.png';
          case 'predator':
              return 'https://apexlegendsstatus.com/assets/badges/badges_new/you_re_tiering_me_apart_apex_predator_rs7.png';
      }
    }
    // Bouton statistique Call of Duty
    if (interaction.customId === 'STATS_COD_BUTTON') {
      await interaction.reply({ content: "Ceci n'est malheuresement pas encore disponible.", ephemeral: true });
    }
    

    if (interaction.channel === null) return;
    if (!interaction.isCommand()) return;
    if (!bot.commands.has(interaction.commandName)) return;

    let timeoutFlag = false;
    let timeout = setTimeout(function () {
      timeoutFlag = true;
      interaction.reply({
        content:
          "**L'ex√©cution de la commande prend plus de temps que pr√©vu. __Merci__ de patienter...**",
        ephemeral: true,
      });
    }, 5000);

    try {
      await bot.commands.get(interaction.commandName).execute(interaction, bot);
      clearTimeout(timeout);
    } catch (error) {
      console.error(error);
      if (typeof interaction.reply === "function") {
        interaction.reply({
          content:
            "**Une erreur est survenue lors de l'ex√©cution de la commande -> contact mon cr√©ateur `tbmpqf`.**",
          ephemeral: true,
        });
      } else {
        interaction.channel.send({
          content:
            "**Une erreur est survenue lors de l'ex√©cution de la commande -> contact mon cr√©ateur `tbmpqf`.**",
        });
      }
    }
    if (timeoutFlag) {
      // En cas de d√©passement du temps, vous pouvez ajouter une action suppl√©mentaire ici
      console.error(
        `Command ${interaction.commandName} trop longue a execut√©.`
      );
      // Si vous avez un syst√®me de surveillance externe, vous pouvez envoyer une notification √† ce syst√®me.
      interaction.followUp({
        content:
          "**La commande a pris trop de temps √† r√©pondre et a √©t√© annul√©e. Veuillez r√©essayer plus tard.**",
        ephemeral: true,
      });
    }
  },
};
